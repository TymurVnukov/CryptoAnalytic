<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Skia</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Skia.DrawingContextImpl">
            <summary>
            Skia based drawing context.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.DrawingContextImpl.CreateInfo">
            <summary>
            Context create info.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.DrawingContextImpl.CreateInfo.Canvas">
            <summary>
            Canvas to draw to.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.DrawingContextImpl.CreateInfo.Surface">
            <summary>
            Surface to draw to.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.DrawingContextImpl.CreateInfo.Dpi">
            <summary>
            Dpi of drawings.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.DrawingContextImpl.CreateInfo.VisualBrushRenderer">
            <summary>
            Visual brush renderer.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.DrawingContextImpl.CreateInfo.DisableTextLcdRendering">
            <summary>
            Render text without Lcd rendering.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.DrawingContextImpl.CreateInfo.GrContext">
            <summary>
            GPU-accelerated context (optional)
            </summary>
        </member>
        <member name="F:Avalonia.Skia.DrawingContextImpl.CreateInfo.Gpu">
            <summary>
            Skia GPU provider context (optional)
            </summary>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.#ctor(Avalonia.Skia.DrawingContextImpl.CreateInfo,System.IDisposable[])">
            <summary>
            Create new drawing context.
            </summary>
            <param name="createInfo">Create info.</param>
            <param name="disposables">Array of elements to dispose after drawing has finished.</param>
        </member>
        <member name="P:Avalonia.Skia.DrawingContextImpl.Canvas">
            <summary>
            Skia canvas.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.Clear(Avalonia.Media.Color)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawBitmap(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},System.Double,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawBitmap(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},Avalonia.Media.IBrush,Avalonia.Rect,Avalonia.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawLine(Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawRectangle(Avalonia.Media.IExperimentalAcrylicMaterial,Avalonia.RoundedRect)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawRectangle(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.RoundedRect,Avalonia.Media.BoxShadows)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawText(Avalonia.Media.IBrush,Avalonia.Point,Avalonia.Platform.IFormattedTextImpl)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.DrawGlyphRun(Avalonia.Media.IBrush,Avalonia.Media.GlyphRun)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.CreateLayer(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PushClip(Avalonia.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PopClip">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PushOpacity(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PopOpacity">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PushGeometryClip(Avalonia.Platform.IGeometryImpl)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PopGeometryClip">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PushOpacityMask(Avalonia.Media.IBrush,Avalonia.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PopOpacityMask">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.DrawingContextImpl.Transform">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.ConfigureGradientBrush(Avalonia.Skia.DrawingContextImpl.PaintWrapper@,Avalonia.Size,Avalonia.Media.IGradientBrush)">
            <summary>
            Configure paint wrapper for using gradient brush.
            </summary>
            <param name="paintWrapper">Paint wrapper.</param>
            <param name="targetSize">Target size.</param>
            <param name="gradientBrush">Gradient brush.</param>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.ConfigureTileBrush(Avalonia.Skia.DrawingContextImpl.PaintWrapper@,Avalonia.Size,Avalonia.Media.ITileBrush,Avalonia.Skia.IDrawableBitmapImpl)">
            <summary>
            Configure paint wrapper for using tile brush.
            </summary>
            <param name="paintWrapper">Paint wrapper.</param>
            <param name="targetSize">Target size.</param>
            <param name="tileBrush">Tile brush to use.</param>
            <param name="tileBrushImage">Tile brush image.</param>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.ConfigureVisualBrush(Avalonia.Skia.DrawingContextImpl.PaintWrapper@,Avalonia.Media.IVisualBrush,Avalonia.Rendering.IVisualBrushRenderer,Avalonia.Skia.IDrawableBitmapImpl@)">
            <summary>
            Configure paint wrapper to use visual brush.
            </summary>
            <param name="paintWrapper">Paint wrapper.</param>
            <param name="visualBrush">Visual brush.</param>
            <param name="visualBrushRenderer">Visual brush renderer.</param>
            <param name="tileBrushImage">Tile brush image.</param>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.CreatePaint(SkiaSharp.SKPaint,Avalonia.Media.IBrush,Avalonia.Size,System.Boolean)">
            <summary>
            Creates paint wrapper for given brush.
            </summary>
            <param name="paint">The paint to wrap.</param>
            <param name="brush">Source brush.</param>
            <param name="targetSize">Target size.</param>
            <param name="disposePaint">Optional dispose of the supplied paint.</param>
            <returns>Paint wrapper for given brush.</returns>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.CreatePaint(SkiaSharp.SKPaint,Avalonia.Media.IPen,Avalonia.Size,System.Boolean)">
            <summary>
            Creates paint wrapper for given pen.
            </summary>
            <param name="paint">The paint to wrap.</param>
            <param name="pen">Source pen.</param>
            <param name="targetSize">Target size.</param>
            <param name="disposePaint">Optional dispose of the supplied paint.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.CreateRenderTarget(Avalonia.Size,System.Boolean,System.Nullable{Avalonia.Platform.PixelFormat})">
            <summary>
            Create new render target compatible with this drawing context.
            </summary>
            <param name="size">The size of the render target in DIPs.</param>
            <param name="isLayer">Whether the render target is being created for a layer.</param>
            <param name="format">Pixel format.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Skia.DrawingContextImpl.PaintState">
            <summary>
            Skia cached paint state.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PaintState.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Skia.DrawingContextImpl.PaintWrapper">
            <summary>
            Skia paint wrapper.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PaintWrapper.AddDisposable(System.IDisposable)">
            <summary>
            Add new disposable to a wrapper.
            </summary>
            <param name="disposable">Disposable to add.</param>
        </member>
        <member name="M:Avalonia.Skia.DrawingContextImpl.PaintWrapper.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Skia.EllipseGeometryImpl">
            <summary>
            A Skia implementation of a <see cref="T:Avalonia.Media.EllipseGeometry"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.FormattedTextImpl">
            <summary>
            Skia formatted text implementation.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.FramebufferRenderTarget">
            <summary>
            Skia render target that renders to a framebuffer surface. No gpu acceleration available.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.#ctor(Avalonia.Controls.Platform.Surfaces.IFramebufferPlatformSurface)">
            <summary>
            Create new framebuffer render target using a target surface.
            </summary>
            <param name="platformSurface">Target surface.</param>
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.AreImageInfosCompatible(SkiaSharp.SKImageInfo,SkiaSharp.SKImageInfo)">
            <summary>
            Check if two images info are compatible.
            </summary>
            <param name="currentImageInfo">Current.</param>
            <param name="desiredImageInfo">Desired.</param>
            <returns>True, if images are compatible.</returns>
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.CreateSurface(SkiaSharp.SKImageInfo,Avalonia.Platform.ILockedFramebuffer)">
            <summary>
            Create Skia surface backed by given framebuffer.
            </summary>
            <param name="desiredImageInfo">Desired image info.</param>
            <param name="framebuffer">Backing framebuffer.</param>
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.FreeSurface">
            <summary>
            Free Skia surface.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.FramebufferRenderTarget.PixelFormatConversionShim">
            <summary>
            Converts non-compatible pixel formats using bitmap copies.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.FramebufferRenderTarget.PixelFormatConversionShim.Surface">
            <summary>
            Skia surface.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.FramebufferRenderTarget.PixelFormatConversionShim.SurfaceCopyHandler">
            <summary>
            Handler to start conversion via surface copy.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.PixelFormatConversionShim.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.FramebufferRenderTarget.PixelFormatConversionShim.CopySurface">
            <summary>
            Convert and copy surface to a framebuffer.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.GeometryImpl">
            <summary>
            A Skia implementation of <see cref="T:Avalonia.Platform.IGeometryImpl"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.GeometryImpl.Bounds">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.FillContains(Avalonia.Point)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.StrokeContains(Avalonia.Media.IPen,Avalonia.Point)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.UpdatePathCache(System.Single)">
            <summary>
            Update path cache for given stroke width.
            </summary>
            <param name="strokeWidth">Stroke width.</param>
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.PathContainsCore(SkiaSharp.SKPath,Avalonia.Point)">
            <summary>
            Check Skia path if it contains a point.
            </summary>
            <param name="path">Path to check.</param>
            <param name="point">Point.</param>
            <returns>True, if point is contained in a path.</returns>
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.Intersect(Avalonia.Platform.IGeometryImpl)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.GetRenderBounds(Avalonia.Media.IPen)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.WithTransform(Avalonia.Matrix)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.InvalidateCaches">
            <summary>
            Invalidate all caches. Call after chaining path contents.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.GeometryImpl.PathCache.Tolerance">
            <summary>
            Tolerance for two stroke widths to be deemed equal
            </summary>
        </member>
        <member name="P:Avalonia.Skia.GeometryImpl.PathCache.CachedStrokePath">
            <summary>
            Cached contour path.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.GeometryImpl.PathCache.CachedGeometryRenderBounds">
            <summary>
            Cached geometry render bounds.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.PathCache.HasCacheFor(System.Single)">
            <summary>
            Is cached valid for given stroke width.
            </summary>
            <param name="strokeWidth">Stroke width to check.</param>
            <returns>True, if CachedStrokePath can be used for given stroke width.</returns>
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.PathCache.Cache(SkiaSharp.SKPath,System.Single,Avalonia.Rect)">
            <summary>
            Cache path for given stroke width. Takes ownership of a passed path.
            </summary>
            <param name="path">Path to cache.</param>
            <param name="strokeWidth">Stroke width to cache.</param>
            <param name="geometryRenderBounds">Render bounds to use.</param>
        </member>
        <member name="M:Avalonia.Skia.GeometryImpl.PathCache.Invalidate">
            <summary>
            Invalidate cache state.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.GlyphRunImpl">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.GlyphRunImpl.TextBlob">
            <summary>
                Gets the text blob to draw.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.DesignEmHeight">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.Ascent">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.Descent">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.LineGap">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.UnderlinePosition">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.UnderlineThickness">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.StrikethroughPosition">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.StrikethroughThickness">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="P:Avalonia.Skia.GlyphTypefaceImpl.IsFixedPitch">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="M:Avalonia.Skia.GlyphTypefaceImpl.GetGlyph(System.UInt32)">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="M:Avalonia.Skia.GlyphTypefaceImpl.GetGlyphs(System.ReadOnlySpan{System.UInt32})">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="M:Avalonia.Skia.GlyphTypefaceImpl.GetGlyphAdvance(System.UInt16)">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="M:Avalonia.Skia.GlyphTypefaceImpl.GetGlyphAdvances(System.ReadOnlySpan{System.UInt16})">
            <inheritdoc cref="T:Avalonia.Platform.IGlyphTypefaceImpl"/>
        </member>
        <member name="T:Avalonia.Skia.ISkiaGpu">
            <summary>
            Custom Skia gpu instance.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.ISkiaGpu.TryCreateRenderTarget(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Attempts to create custom render target from given surfaces.
            </summary>
            <param name="surfaces">Surfaces.</param>
            <returns>Created render target or <see langword="null"/> if it fails.</returns>
        </member>
        <member name="M:Avalonia.Skia.ISkiaGpu.TryCreateSurface(Avalonia.PixelSize,Avalonia.Skia.ISkiaGpuRenderSession)">
            <summary>
            Creates an offscreen render target surface
            </summary>
            <param name="size">size in pixels</param>
        </member>
        <member name="T:Avalonia.Skia.ISkiaGpuRenderSession">
            <summary>
            Custom render session for Skia render target.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.ISkiaGpuRenderSession.GrContext">
            <summary>
            GrContext used by this session.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.ISkiaGpuRenderSession.SkSurface">
            <summary>
            Canvas that will be used to render.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.ISkiaGpuRenderSession.ScaleFactor">
            <summary>
            Scaling factor.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.ISkiaGpuRenderTarget">
            <summary>
            Custom Skia render target.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.ISkiaGpuRenderTarget.BeginRenderingSession">
            <summary>
            Start rendering to this render target.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Skia.SkiaGpuRenderTarget">
            <summary>
            Adapts <see cref="T:Avalonia.Skia.ISkiaGpuRenderTarget"/> to be used within our rendering pipeline.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.Helpers.DrawingContextHelper.WrapSkiaCanvas(SkiaSharp.SKCanvas,Avalonia.Vector,Avalonia.Rendering.IVisualBrushRenderer)">
            <summary>
            Wrap Skia canvas in drawing context so we can use Avalonia api to render to external skia canvas
            this is useful in scenarios where canvas is not controlled by application, but received from another non avalonia api
            like: SKCanvas canvas = SKDocument.BeginPage(...);
            </summary>
            <param name="canvas"></param>
            <param name="dpi"></param>
            <param name="visualBrushRenderer"></param>
            <returns>DrawingContext</returns>
        </member>
        <member name="T:Avalonia.Skia.Helpers.ImageSavingHelper">
            <summary>
            Helps with saving images to stream/file.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.Helpers.ImageSavingHelper.SaveImage(SkiaSharp.SKImage,System.String)">
            <summary>
            Save Skia image to a file.
            </summary>
            <param name="image">Image to save</param>
            <param name="fileName">Target file.</param>
        </member>
        <member name="M:Avalonia.Skia.Helpers.ImageSavingHelper.SaveImage(SkiaSharp.SKImage,System.IO.Stream)">
            <summary>
            Save Skia image to a stream.
            </summary>
            <param name="image">Image to save</param>
            <param name="stream">Target stream.</param>
        </member>
        <member name="T:Avalonia.Skia.Helpers.PixelFormatHelper">
            <summary>
            Helps with resolving pixel formats to Skia color types.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.Helpers.PixelFormatHelper.ResolveColorType(System.Nullable{Avalonia.Platform.PixelFormat})">
            <summary>
            Resolve given format to Skia color type.
            </summary>
            <param name="format">Format to resolve.</param>
            <returns>Resolved color type.</returns>
        </member>
        <member name="T:Avalonia.Skia.IDrawableBitmapImpl">
            <summary>
            Extended bitmap implementation that allows for drawing it's contents.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.IDrawableBitmapImpl.Draw(Avalonia.Skia.DrawingContextImpl,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <summary>
            Draw bitmap to a drawing context.
            </summary>
            <param name="context">Drawing context.</param>
            <param name="sourceRect">Source rect.</param>
            <param name="destRect">Destination rect.</param>
            <param name="paint">Paint to use.</param>
        </member>
        <member name="T:Avalonia.Skia.ImmutableBitmap">
            <summary>
            Immutable Skia bitmap.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.ImmutableBitmap.#ctor(System.IO.Stream)">
            <summary>
            Create immutable bitmap from given stream.
            </summary>
            <param name="stream">Stream containing encoded data.</param>
        </member>
        <member name="M:Avalonia.Skia.ImmutableBitmap.#ctor(Avalonia.PixelSize,Avalonia.Vector,System.Int32,Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat,System.IntPtr)">
            <summary>
            Create immutable bitmap from given pixel data copy.
            </summary>
            <param name="size">Size of the bitmap.</param>
            <param name="dpi">DPI of the bitmap.</param>
            <param name="stride">Stride of data pixels.</param>
            <param name="format">Format of data pixels.</param>
            <param name="alphaFormat">Alpha format of data pixels.</param>
            <param name="data">Data pixels.</param>
        </member>
        <member name="M:Avalonia.Skia.ImmutableBitmap.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.ImmutableBitmap.Save(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.ImmutableBitmap.Save(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.ImmutableBitmap.Draw(Avalonia.Skia.DrawingContextImpl,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Skia.LineGeometryImpl">
            <summary>
            A Skia implementation of a <see cref="T:Avalonia.Media.LineGeometry"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.PlatformRenderInterface">
            <summary>
            Skia platform render interface.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.CreateFormattedText(System.String,Avalonia.Media.Typeface,System.Double,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,Avalonia.Size,System.Collections.Generic.IReadOnlyList{Avalonia.Media.FormattedTextStyleSpan})">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.CreateStreamGeometry">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.LoadBitmap(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.LoadBitmap(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.LoadBitmap(Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat,System.IntPtr,Avalonia.PixelSize,Avalonia.Vector,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.LoadBitmapToWidth(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.LoadBitmapToHeight(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.ResizeBitmap(Avalonia.Platform.IBitmapImpl,Avalonia.PixelSize,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.CreateRenderTargetBitmap(Avalonia.PixelSize,Avalonia.Vector)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.CreateRenderTarget(System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.CreateWriteableBitmap(Avalonia.PixelSize,Avalonia.Vector,Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.PlatformRenderInterface.CreateGlyphRun(Avalonia.Media.GlyphRun,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Skia.RectangleGeometryImpl">
            <summary>
            A Skia implementation of a <see cref="T:Avalonia.Media.RectangleGeometry"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Skia.SkiaPlatform">
            <summary>
            Skia platform initializer.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.SkiaPlatform.Initialize">
            <summary>
            Initialize Skia platform.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.SkiaPlatform.DefaultDpi">
            <summary>
            Default DPI.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.SKTypefaceCollectionCache.GetOrAddTypefaceCollection(Avalonia.Media.FontFamily)">
            <summary>
            Gets the or add typeface collection.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Skia.SKTypefaceCollectionCache.CreateCustomFontCollection(Avalonia.Media.FontFamily)">
            <summary>
            Creates the custom font collection.
            </summary>
            <param name="fontFamily">The font family.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Skia.StreamGeometryImpl">
            <summary>
            A Skia implementation of a <see cref="T:Avalonia.Platform.IStreamGeometryImpl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.#ctor(SkiaSharp.SKPath,Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Skia.StreamGeometryImpl"/> class.
            </summary>
            <param name="path">An existing Skia <see cref="T:SkiaSharp.SKPath"/>.</param>
            <param name="bounds">Precomputed path bounds.</param>
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.#ctor(SkiaSharp.SKPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Skia.StreamGeometryImpl"/> class.
            </summary>
            <param name="path">An existing Skia <see cref="T:SkiaSharp.SKPath"/>.</param>
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Skia.StreamGeometryImpl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Skia.StreamGeometryImpl.EffectivePath">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.StreamGeometryImpl.Bounds">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.Clone">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.Open">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.CreateEmptyPath">
            <summary>
            Create new empty <see cref="T:SkiaSharp.SKPath"/>.
            </summary>
            <returns>Empty <see cref="T:SkiaSharp.SKPath"/></returns>
        </member>
        <member name="T:Avalonia.Skia.StreamGeometryImpl.StreamContext">
            <summary>
            A Skia implementation of a <see cref="T:Avalonia.Platform.IStreamGeometryContextImpl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.#ctor(Avalonia.Skia.StreamGeometryImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Skia.StreamGeometryImpl.StreamContext"/> class.
            <param name="geometryImpl">Geometry to operate on.</param>
            </summary>
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.Dispose">
            <inheritdoc />
            <remarks>Will update bounds of passed geometry.</remarks>
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.ArcTo(Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,Avalonia.Media.SweepDirection)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.BeginFigure(Avalonia.Point,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.CubicBezierTo(Avalonia.Point,Avalonia.Point,Avalonia.Point)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.QuadraticBezierTo(Avalonia.Point,Avalonia.Point)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.LineTo(Avalonia.Point)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.EndFigure(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.StreamGeometryImpl.StreamContext.SetFillRule(Avalonia.Media.FillRule)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Skia.SurfaceRenderTarget">
            <summary>
            Skia render target that writes to a surface.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.#ctor(Avalonia.Skia.SurfaceRenderTarget.CreateInfo)">
            <summary>
            Create new surface render target.
            </summary>
            <param name="createInfo">Create info.</param>
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.CreateSurface(SkiaSharp.GRContext,System.Int32,System.Int32,System.Nullable{Avalonia.Platform.PixelFormat})">
            <summary>
            Create backing Skia surface.
            </summary>
            <param name="gpu">GPU.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="format">Format.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer)">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.SurfaceRenderTarget.Dpi">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.SurfaceRenderTarget.PixelSize">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.Save(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.Save(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.Draw(Avalonia.Skia.DrawingContextImpl,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.SnapshotImage">
            <summary>
            Create Skia image snapshot from a surface.
            </summary>
            <returns>Image snapshot.</returns>
        </member>
        <member name="M:Avalonia.Skia.SurfaceRenderTarget.MakeImageInfo(System.Int32,System.Int32,System.Nullable{Avalonia.Platform.PixelFormat})">
            <summary>
            Create image info for given parameters.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="format">Format.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Skia.SurfaceRenderTarget.CreateInfo">
            <summary>
            Create info of a surface render target.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.SurfaceRenderTarget.CreateInfo.Width">
            <summary>
            Width of a render target.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.SurfaceRenderTarget.CreateInfo.Height">
            <summary>
            Height of a render target.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.SurfaceRenderTarget.CreateInfo.Dpi">
            <summary>
            Dpi used when rendering to a surface.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.SurfaceRenderTarget.CreateInfo.Format">
            <summary>
            Pixel format of a render target.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.SurfaceRenderTarget.CreateInfo.DisableTextLcdRendering">
            <summary>
            Render text without Lcd rendering.
            </summary>
        </member>
        <member name="F:Avalonia.Skia.SurfaceRenderTarget.CreateInfo.GrContext">
            <summary>
            GPU-accelerated context (optional)
            </summary>
        </member>
        <member name="T:Avalonia.Skia.TransformedGeometryImpl">
            <summary>
            A Skia implementation of a <see cref="T:Avalonia.Platform.ITransformedGeometryImpl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.TransformedGeometryImpl.#ctor(Avalonia.Skia.GeometryImpl,Avalonia.Matrix)">
            <summary>
             Initializes a new instance of the <see cref="T:Avalonia.Skia.TransformedGeometryImpl"/> class.
            </summary>
            <param name="source">Source geometry.</param>
            <param name="transform">Transform of new geometry.</param>
        </member>
        <member name="P:Avalonia.Skia.TransformedGeometryImpl.EffectivePath">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.TransformedGeometryImpl.SourceGeometry">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.TransformedGeometryImpl.Transform">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.TransformedGeometryImpl.Bounds">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Skia.WriteableBitmapImpl">
            <summary>
            Skia based writeable bitmap.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.#ctor(Avalonia.PixelSize,Avalonia.Vector,Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat)">
            <summary>
            Create new writeable bitmap.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="format">The pixel format.</param>
            <param name="alphaFormat">The alpha format.</param>
        </member>
        <member name="P:Avalonia.Skia.WriteableBitmapImpl.PixelSize">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.Draw(Avalonia.Skia.DrawingContextImpl,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.Save(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.Save(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.Lock">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.GetSnapshot">
            <summary>
            Get snapshot as image.
            </summary>
            <returns>Image snapshot.</returns>
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.ReleaseProc(System.IntPtr,System.Object)">
            <summary>
            Release given unmanaged blob.
            </summary>
            <param name="address">Blob address.</param>
            <param name="ctx">Blob.</param>
        </member>
        <member name="T:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer">
            <summary>
            Framebuffer for bitmap.
            </summary>
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer.#ctor(Avalonia.Skia.WriteableBitmapImpl,SkiaSharp.SKBitmap)">
            <summary>
            Create framebuffer from given bitmap.
            </summary>
            <param name="parent">Parent bitmap impl.</param>
            <param name="bitmap">Bitmap.</param>
        </member>
        <member name="M:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer.Address">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer.Size">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer.RowBytes">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer.Dpi">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Skia.WriteableBitmapImpl.BitmapFramebuffer.Format">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.SkiaApplicationExtensions">
            <summary>
            Skia application extensions.
            </summary>
        </member>
        <member name="M:Avalonia.SkiaApplicationExtensions.UseSkia``1(``0)">
            <summary>
            Enable Skia renderer.
            </summary>
            <typeparam name="T">Builder type.</typeparam>
            <param name="builder">Builder.</param>
            <returns>Configure builder.</returns>
        </member>
        <member name="T:Avalonia.SkiaOptions">
            <summary>
            Options for Skia rendering subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.SkiaOptions.CustomGpuFactory">
            <summary>
            Custom gpu factory to use. Can be used to customize behavior of Skia renderer.
            </summary>
        </member>
        <member name="P:Avalonia.SkiaOptions.MaxGpuResourceSizeBytes">
            <summary>
            The maximum number of bytes for video memory to store textures and resources.
            </summary>
            <remarks>
            This is set by default to the recommended value for Avalonia.
            Setting this to null will give you the default Skia value.
            </remarks>
        </member>
        <member name="T:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc">
            <summary>
            This class represents an elliptical arc on a 2D plane.
            
            This class is adapted for use with WPF StreamGeometryContext, and needs to be created explicitly
            for each particular arc.
            
            Some helpers
            
            It can handle ellipses which are not aligned with the x and y reference axes of the plane,
            as well as their parts.
            
            Another improvement is that this class can handle degenerated cases like for example very 
            flat ellipses(semi-minor axis much smaller than semi-major axis) and drawing of very small 
            parts of such ellipses at very high magnification scales.This imply monitoring the drawing 
            approximation error for extremely small values.Such cases occur for example while drawing 
            orbits of comets near the perihelion.
            
            When the arc does not cover the complete ellipse, the lines joining the center of the 
            ellipse to the endpoints can optionally be included or not in the outline, hence allowing 
            to use it for pie-charts rendering. If these lines are not included, the curve is not 
            naturally closed.
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs2Low">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0 ≤ b/a ≤ 0.25
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs2High">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Safety2">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs3Low">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Coeffs3High">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Safety3">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Cx">
            <summary>
            Abscissa of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Cy">
            <summary>
            Ordinate of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.A">
            <summary>
            Semi-major axis
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.B">
            <summary>
            Semi-minor axis
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Theta">
            <summary>
            Orientation of the major axis with respect to the x axis
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._cosTheta">
            <summary>
            Pre-calculated cosine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._sinTheta">
            <summary>
            Pre-calculated sine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Eta1">
            <summary>
            Start angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Eta2">
            <summary>
            End angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.X1">
            <summary>
            Abscissa of the start point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Y1">
            <summary>
            Ordinate of the start point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.X2">
            <summary>
            Abscissa of the end point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Y2">
            <summary>
            Ordinate of the end point
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.FirstFocusX">
            <summary>
            Abscissa of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.FirstFocusY">
            <summary>
            Ordinate of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SecondFocusX">
            <summary>
            Abscissa of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SecondFocusY">
            <summary>
            Ordinate of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._xLeft">
            <summary>
            Abscissa of the leftmost point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._yUp">
            <summary>
            Ordinate of the highest point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._width">
            <summary>
            Horizontal width of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._height">
            <summary>
            Vertical height of the arc
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.IsPieSlice">
            <summary>
            Indicator for center to endpoints line inclusion
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._maxDegree">
            <summary>
            Maximal degree for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc._defaultFlatness">
            <summary>
            Default flatness for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.F">
            <summary>
            Indicator for semi-major axis significance (compared to semi-minor one).
            Computed by dividing the (A-B) difference by the value of A.
            This indicator is used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.E2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.G">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.G2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor">
            <summary>
            Builds an elliptical arc composed of the full unit circle around (0,0)
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SetMaxDegree(System.Int32)">
            <summary>
            Sets the maximal degree allowed for Bezier curve approximation.
            </summary>
            <param name="maxDegree">Maximal allowed degree (must be between 1 and 3)</param>
            <exception cref="T:System.ArgumentException">Thrown if maxDegree is not between 1 and 3</exception>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SetDefaultFlatness(System.Double)">
            <summary>
            Sets the default flatness for Bezier curve approximation
            </summary>
            <param name="defaultFlatness">default flatness (must be greater than 1e-10)</param>
            <exception cref="T:System.ArgumentException">Thrown if defaultFlatness is lower than 1e-10</exception>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeFocii">
            <summary>
            Computes the locations of the focii
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeEndPoints">
            <summary>
            Computes the locations of the endpoints
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeBounds">
            <summary>
            Computes the bounding box
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.ComputeDerivedFlatnessParameters">
            <summary>
            Computes the flatness parameters used in intersection tests
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.RationalFunction(System.Double,System.Double[])">
            <summary>
            Computes the value of a rational function.
            This method handles rational functions where the numerator is quadratic
            and the denominator is linear
            </summary>
            <param name="x">Abscissa for which the value should be computed</param>
            <param name="c">Coefficients array of the rational function</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.EstimateError(System.Int32,System.Double,System.Double)">
            <summary>
            Estimate the approximation error for a sub-arc of the instance
            </summary>
            <param name="degree">Degree of the Bezier curve to use (1, 2 or 3)</param>
            <param name="etaA">Start angle of the sub-arc</param>
            <param name="etaB">End angle of the sub-arc</param>
            <returns>Upper bound of the approximation error between the Bezier curve and the real ellipse</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.PointAt(System.Double)">
            <summary>
            Get the elliptical arc point for a given angular parameter
            </summary>
            <param name="lambda">Angular parameter for which point is desired</param> 
            <returns>The desired elliptical arc point location</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(System.Double,System.Double)">
            <summary>
            Tests if the specified coordinates are inside the closed shape formed by this arc.
            If this is not a pie, then a shape derived by adding a closing chord is considered.
            </summary>
            <param name="x">Abscissa of the test point</param>
            <param name="y">Ordinate of the test point</param>
            <returns>True if the specified coordinates are inside the closed shape of this arc</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.IntersectArc(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the arc
            </summary>
            <param name="xA">abscissa of the first point of the line segment</param>
            <param name="yA">ordinate of the first point of the line segment</param>
            <param name="xB">abscissa of the second point of the line segment</param>
            <param name="yB">ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Intersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if two line segments intersect
            </summary>
            <param name="x1">Abscissa of the first point of the first line segment</param>
            <param name="y1">Ordinate of the first point of the first line segment</param>
            <param name="x2">Abscissa of the second point of the first line segment</param>
            <param name="y2">Ordinate of the second point of the first line segment</param>
            <param name="xA">Abscissa of the first point of the second line segment</param>
            <param name="yA">Ordinate of the first point of the second line segment</param>
            <param name="xB">Abscissa of the second point of the second line segment</param>
            <param name="yB">Ordinate of the second point of the second line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.IntersectOutline(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the outline
            </summary>
            <param name="xA">Abscissa of the first point of the line segment</param>
            <param name="yA">Ordinate of the first point of the line segment</param>
            <param name="xB">Abscissa of the second point of the line segment</param>
            <param name="yB">Ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="x">Abscissa of the upper-left corner of the test rectangle</param>
            <param name="y">Ordinate of the upper-left corner of the test rectangle</param>
            <param name="w">Width of the test rectangle</param>
            <param name="h">Height of the test rectangle</param>
            <returns>true if the interior of a closed path derived from this arc entirely contains the specified rectangular area; false otherwise</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(Avalonia.Point)">
            <summary>
            Tests if a specified Point2D is inside the boundary of a closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="p">Test point</param>
            <returns>true if the specified point is inside a closed path derived from this arc</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Contains(Avalonia.Rect)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="r">Test rectangle</param>
            <returns>True if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D; false otherwise</returns>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.GetBounds">
            <summary>
            Returns an integer Rectangle that completely encloses the closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary> 
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.BuildArc(Avalonia.Platform.IStreamGeometryContextImpl)">
            <summary>
            Builds the arc outline using given StreamGeometryContext and default (max) Bezier curve degree and acceptable error of half a pixel (0.5)
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.BuildArc(Avalonia.Platform.IStreamGeometryContextImpl,System.Int32,System.Double,System.Boolean)">
            <summary>
            Builds the arc outline using given StreamGeometryContext
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
            <param name="degree">degree of the Bezier curve to use</param>
            <param name="threshold">acceptable error</param>
            <param name="openNewFigure">if true, a new figure will be started in the specified StreamGeometryContext</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.GetAngle(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Calculates the angle between two vectors
            </summary>
            <param name="v1">Vector V1</param>
            <param name="v2">Vector V2</param>
            <returns>The signed angle between v2 and v1</returns>
        </member>
        <member name="T:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.SimpleMatrix">
            <summary>
            Simple matrix used for rotate transforms. 
            At some point I did not trust the WPF Matrix struct, and wrote my own simple one -_-
            This is supposed to be replaced with proper WPF Matrices everywhere
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.BuildArc(Avalonia.Platform.IStreamGeometryContextImpl,Avalonia.Point,Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,System.Boolean)">
            <summary>
            ArcTo Helper for StreamGeometryContext
            </summary>
            <param name="path">Target path</param>
            <param name="p1">Start point</param>
            <param name="p2">End point</param>
            <param name="size">Ellipse radii</param>
            <param name="theta">Ellipse theta (angle measured from the abscissa)</param>
            <param name="isLargeArc">Large Arc Indicator</param>
            <param name="clockwise">Clockwise direction flag</param>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
        <member name="M:Avalonia.RenderHelpers.ArcToHelper.EllipticalArc.Intersects(Avalonia.Rect)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
    </members>
</doc>
